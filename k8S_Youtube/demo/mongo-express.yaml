apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8081
        env:
        # username and password not here in plain text 
        # we will create a secret that live in k8s and not in the repo
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongo-root-username
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongo-root-password
        #CONFIG MAP: centralisé, other components can use
        - name: ME_CONFIG_MONGODB_SERVER
          valueFrom:
            configMapKeyRef:
              name:  mongodb-configmap
              key: database_url
---
#External service
apiVersion: v1 
kind: Service
metadata:
  name: mongo-express-service
spec:
  # To connect to the port via the label
  selector:
    app: mongo-express
  type: LoadBalancer  # Un service interne agit aussi comme un load balancer (qui donne une adresse ip externe)
  ports:
    - protocol: TCP
      port: 8081         # service port
      targetPort: 8081   # container port
      nodePort: 30000 # Port to put in the brower (30000 -  32767)

# Un service externe 
# type load balancer : il accepte des requetes externe en assignant une adresse ip externe au service
# nodePort : Pour ou le service externe sera ouvert pour être accessible par le navigateur

# Dans le service interne on ne mentionne pas de type, il aura par défaut le type clusterip